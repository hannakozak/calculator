{"version":3,"sources":["App.js","Display.js","Keypad.js","serviceWorker.js","index.js"],"names":["App","props","handleResult","setState","currentValue","Math","round","eval","state","handleNumbers","e","target","innerHTML","value","slice","handleClear","decimal","operator","handleOperators","handleDecimal","class","this","formula","React","Component","Display","id","Keypad","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f75981a.chunk.js","sourcesContent":["import React from 'react';\nimport Display from './Display';\nimport Keypad from './Keypad';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentValue: 0,\n      decimal: false,\n      operator: false\n  }\n  }\n  \nhandleResult = () => {\n\t // eslint-disable-next-line\n this.setState({currentValue: Math.round(1000000000000 * eval(this.state.currentValue)) / 1000000000000})\n }\n \nhandleNumbers = (e) => {\n   if (this.state.currentValue === 0) {\n       this.setState({currentValue: e.target.innerHTML})\n  }\n    else \n     { this.setState({currentValue: this.state.currentValue + e.target.value})}\n  \n   if (this.state.currentValue === \"0\"){\n      this.setState({currentValue: this.state.currentValue.slice(0, -1)})\n    }\n  }\n  \nhandleClear = (e) => {\n  this.setState({currentValue: 0,\n                decimal: false,\n                 operator: false\n                })\n}\n\nhandleOperators = (e) => {\n this.setState({currentValue: this.state.currentValue + e.target.innerHTML,\n               decimal: false})\n}\n\nhandleDecimal = (e) => {\n  if(!this.state.decimal)  {\n    this.setState({currentValue: this.state.currentValue + e.target.innerHTML,\n                  decimal: true})\n  }\n  else \n    {this.setState({currentValue: this.state.currentValue,\n                    decimal: true\n                   })}\n}\n\n  render(){\n    return (<div class=\"calculator\">\n      <Display currentValue={ this.state.currentValue }\n               formula={ this.state.formula }/>\n      <Keypad handleNumbers={ this.handleNumbers } \n              handleClear={ this.handleClear }\n        handleOperators={ this.handleOperators }\n        handleDecimal={ this.handleDecimal }\n        handleResult={ this.handleResult }/>\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class Display extends React.Component {\r\n  render(){\r\n    return (<div>\r\n      <div id=\"display\"> { this.props.currentValue } </div>\r\n      <div id=\"formula\"> { this.props.formula } </div>\r\n        </div>\r\n        \r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default class Keypad extends React.Component {\r\n  render(){\r\n    return (\r\n    <div id=\"keypad\">\r\n        <button id=\"add\" value=\"add\" onClick = { this.props.handleOperators }>+</button>\r\n        <button id=\"subtract\" value=\"substract\" onClick = { this.props.handleOperators }>-</button>\r\n        <button id=\"multiply\" value=\"multiply\" onClick = { this.props.handleOperators }>*</button>\r\n        <button id=\"divide\" value=\"divide\" onClick = { this.props.handleOperators }>/</button>\r\n        <button id=\"seven\" value=\"7\" onClick = { this.props.handleNumbers }>7</button>\r\n        <button id=\"eight\" value=\"8\" onClick = { this.props.handleNumbers }>8</button>\r\n        <button id=\"nine\" value=\"9\" onClick = { this.props.handleNumbers }>9</button>\r\n        <button id=\"four\" value=\"4\" onClick = { this.props.handleNumbers }>4</button>\r\n        <button id=\"five\" value=\"5\" onClick = { this.props.handleNumbers }>5</button>\r\n        <button id=\"six\" value=\"6\" onClick = { this.props.handleNumbers }>6</button>\r\n        <button id=\"one\" value=\"1\" onClick = { this.props.handleNumbers }>1</button>\r\n        <button id=\"two\" value=\"2\" onClick = { this.props.handleNumbers }>2</button>\r\n        <button id=\"three\" value=\"3\" onClick = { this.props.handleNumbers }>3</button>\r\n        <button id=\"zero\" value=\"0\" onClick = { this.props.handleNumbers }>0</button>\r\n        <button id=\"decimal\" value=\"decimal\" onClick = { this.props.handleDecimal }>.</button>\r\n        <button id=\"clear\" value=\"clear\" onClick = { this.props.handleClear}>AC</button>\r\n        <button id=\"equals\" value=\"=\"  onClick = { this.props.handleResult }>=</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}